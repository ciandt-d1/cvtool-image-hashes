# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ImageHashSearchRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, all_orientations=True, url=None, distance_cutoff=4.5):
        """
        ImageHashSearchRequest - a model defined in Swagger

        :param all_orientations: The all_orientations of this ImageHashSearchRequest.
        :type all_orientations: bool
        :param url: The url of this ImageHashSearchRequest.
        :type url: str
        :param distance_cutoff: The distance_cutoff of this ImageHashSearchRequest.
        :type distance_cutoff: float
        """
        self.swagger_types = {
            'all_orientations': bool,
            'url': str,
            'distance_cutoff': float
        }

        self.attribute_map = {
            'all_orientations': 'all_orientations',
            'url': 'url',
            'distance_cutoff': 'distance_cutoff'
        }

        self._all_orientations = all_orientations
        self._url = url
        self._distance_cutoff = distance_cutoff

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ImageHashSearchRequest of this ImageHashSearchRequest.
        :rtype: ImageHashSearchRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def all_orientations(self):
        """
        Gets the all_orientations of this ImageHashSearchRequest.
        Whether or not to search for similar 90 degree rotations of the image.

        :return: The all_orientations of this ImageHashSearchRequest.
        :rtype: bool
        """
        return self._all_orientations

    @all_orientations.setter
    def all_orientations(self, all_orientations):
        """
        Sets the all_orientations of this ImageHashSearchRequest.
        Whether or not to search for similar 90 degree rotations of the image.

        :param all_orientations: The all_orientations of this ImageHashSearchRequest.
        :type all_orientations: bool
        """

        self._all_orientations = all_orientations

    @property
    def url(self):
        """
        Gets the url of this ImageHashSearchRequest.
        The url of the image tha we will search for matches

        :return: The url of this ImageHashSearchRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ImageHashSearchRequest.
        The url of the image tha we will search for matches

        :param url: The url of this ImageHashSearchRequest.
        :type url: str
        """

        self._url = url

    @property
    def distance_cutoff(self):
        """
        Gets the distance_cutoff of this ImageHashSearchRequest.
        Maximum image signature distance to be considered a match (default 0.45)

        :return: The distance_cutoff of this ImageHashSearchRequest.
        :rtype: float
        """
        return self._distance_cutoff

    @distance_cutoff.setter
    def distance_cutoff(self, distance_cutoff):
        """
        Sets the distance_cutoff of this ImageHashSearchRequest.
        Maximum image signature distance to be considered a match (default 0.45)

        :param distance_cutoff: The distance_cutoff of this ImageHashSearchRequest.
        :type distance_cutoff: float
        """

        self._distance_cutoff = distance_cutoff

